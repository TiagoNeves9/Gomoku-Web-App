/*
 * G09 Gomoku API
 * G09 Gomoku API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CellInputModel;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.GomokuStartInputModel;
import org.openapitools.client.model.Lobby;
import java.util.UUID;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserInputModel;
import org.openapitools.client.model.UserStatistics;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * POST games/start
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrJoinGameTest() throws ApiException {
        GomokuStartInputModel gomokuStartInputModel = null;
        Object response = api.createOrJoinGame(gomokuStartInputModel);
        // TODO: test validations
    }

    /**
     * GET users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        List<User> response = api.getAll();
        // TODO: test validations
    }

    /**
     * GET about
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorsTest() throws ApiException {
        List<Object> response = api.getAuthors();
        // TODO: test validations
    }

    /**
     * GET users/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        UUID id = null;
        User response = api.getById(id);
        // TODO: test validations
    }

    /**
     * GET games/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGameByIdTest() throws ApiException {
        UUID id = null;
        Object response = api.getGameById(id);
        // TODO: test validations
    }

    /**
     * GET games
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGamesTest() throws ApiException {
        List<Game> response = api.getGames();
        // TODO: test validations
    }

    /**
     * GET lobbies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLobbiesTest() throws ApiException {
        List<Lobby> response = api.getLobbies();
        // TODO: test validations
    }

    /**
     * GET rankings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRankingsTest() throws ApiException {
        List<UserStatistics> response = api.getRankings();
        // TODO: test validations
    }

    /**
     * GET rankings/{username}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRankingTest() throws ApiException {
        String username = null;
        UserStatistics response = api.getUserRanking(username);
        // TODO: test validations
    }

    /**
     * GET 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void homeTest() throws ApiException {
        String response = api.home();
        // TODO: test validations
    }

    /**
     * POST users/signup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertTest() throws ApiException {
        UserInputModel userInputModel = null;
        Object response = api.insert(userInputModel);
        // TODO: test validations
    }

    /**
     * GET lobbies/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isGameCreatedTest() throws ApiException {
        UUID id = null;
        Object response = api.isGameCreated(id);
        // TODO: test validations
    }

    /**
     * POST users/login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        UserInputModel userInputModel = null;
        Object response = api.login(userInputModel);
        // TODO: test validations
    }

    /**
     * POST games/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playTest() throws ApiException {
        UUID id = null;
        CellInputModel cellInputModel = null;
        Object response = api.play(id, cellInputModel);
        // TODO: test validations
    }

}
